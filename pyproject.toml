[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"


[project]
name = "uno-agents"
dynamic = ["version"]
authors = [
  { name="Alexey Lukyanov", email="alexey.a.lukyanov@gmail.com" },
]
description = "Agents that play UNO"
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = [
    # "langchain==0.3.26",
    # "langchain-core==0.3.68",
    # "langchain-google-genai==2.0.10",
    # "langgraph==0.5.1",
    # "langgraph-checkpoint==2.1.0",
    # "langgraph-prebuilt==0.5.2",
    # "langgraph-sdk==0.1.72",
    # "ormsgpack==1.10.0",
    # "xxhash==3.5.0",
    # "google-generativeai==0.8.5",
    "annotated-types==0.7.0",
    "typing-extensions==4.14.1",
    "typing-inspection==0.4.1",
    "pydantic-core==2.33.2",
    "pydantic==2.11.7",
    "click==8.2.1",     # For CLI creation
]


#
#       Setuptool
#
[tool.setuptools.dynamic]
version = {attr = "uno_agents.__version__"}

[tool.setuptools]
packages = {find = {where = ["src"]}}


#
#       Entrypoints
#
[project.entry-points."console_scripts"]
gha = "uno_agents.main:main"

#
#       Dependencies
#
[project.optional-dependencies]
dev = [
    "ruff==0.12.1",
    "mypy",
    "python-dotenv==1.1.1",
]

test = [
    "pytest==8.4.1",
    "coverage==7.9.1",
    "pytest-cov==6.2.1",
    "coverage-badge==1.1.2"
]


#
#       Ruff
#
[tool.ruff]
# Optional: Set a target Python version for Ruff's rules.
target-version = "py311"
line-length = 100
namespace-packages = ["src"]


[tool.ruff.lint]
# A list of rule codes to ignore.
ignore = [
    "D401",         # Checks for docstring first lines that are not in an imperative mood (https://docs.astral.sh/ruff/rules/non-imperative-mood/)
    "D413",         # Checks for missing blank lines after the last section of a multiline docstring (https://docs.astral.sh/ruff/rules/missing-blank-line-after-last-section/)
    "FBT001",       # Checks for the use of boolean positional arguments in function definitions, as determined by the presence of a type hint containing bool as an evident subtype - e.g. bool, bool | int, typing.Optional[bool], etc (https://docs.astral.sh/ruff/rules/boolean-type-hint-positional-argument/) SOME RULES JUST NEED TO BE DISABLED
    "T201",         # print found
]
select = ["ALL"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    # Checks for packages that are missing an __init__.py file (https://docs.astral.sh/ruff/rules/implicit-namespace-package/#implicit-namespace-package-inp001)
    # We exclude this rule in the tests because if we add __init__.py
    # files to tests/, pytest will not be able to recognize tests because
    # it is going to treat the tests/ directory as a package.
    "INP001",
    "S101",         # Checks for uses of the assert keyword (https://docs.astral.sh/ruff/rules/assert/)
]

[tool.ruff.format]
quote-style = "double"

#
#       PyTest and Coverage
#
[tool.pytest.ini_options]
addopts = "-v --cov=github_agents --cov-report=term --cov-report=json --cov-branch"
log_cli = "true"
log_level = "DEBUG"
python_files = "test_*.py"
python_functions = "test_*"

[tool.coverage.run]
source = ["src"] # Or adjust to your project's structure
omit = [
    "tests/*",
    "*/__init__.py"
]

[tool.coverage.report]
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]
skip_empty = "true"

[tool.coverage.xml]
output = "coverage.xml"